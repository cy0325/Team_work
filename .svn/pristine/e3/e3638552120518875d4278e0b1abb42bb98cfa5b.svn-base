package org.nwnu.system.controller;


import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;

import org.nwnu.system.entity.GoodsDetail;
import org.nwnu.system.entity.ShopUser;
import org.nwnu.system.entity.SysUser;
import org.nwnu.system.service.ShopUserService;
import org.nwnu.base.controller.BaseController;//基础包
import org.nwnu.pub.util.Const;
import org.nwnu.pub.util.StringUtil;//自定义字符串处理类，如果没有就取掉
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpSession;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * <p>
 * 用户 前端控制器
 * </p>
 *
 * @author Answer
 * @since 2017-08-22
 */
@Controller
@RequestMapping("/ShopUser")
public class ShopUserController extends BaseController {
	@Autowired
	private ShopUserService this_ShopUserService;	
	
	/***
	 * 每个controller的首页
	 * 	 
	 */
	@RequestMapping(value = "/ShopUserIndex")
	public ModelAndView ShopUserIndex(ModelAndView modelAndView) {
		return modelAndView;
	}

	/***
	 * 列表
	 * 
	 * @param 
	 * @param page
	 *            起始页
	 * @param rows
	 *            页面大小 * @param sort 排序字段 * @param rows 排序顺序
	 * @return
	 */
	@RequestMapping(value = "/List", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> GetList(
			@RequestParam(required = false, defaultValue = "1") int page,
			@RequestParam(required = false, defaultValue = "10") int pagesizes,
			@RequestParam(required = false, value="username") String username,
			@RequestParam(required = false, value="usertel") String usertel) {
		EntityWrapper<ShopUser> wrapper=new EntityWrapper<ShopUser>();
		List<ShopUser> ShopUserList = new ArrayList<ShopUser>();
		Map<String, Object> result = new HashMap<String, Object>();		
		//如果有查询条件，此处需要构造查询warpper
		//例如wrapper.eq();			
		// 搜索条件
		if (!StringUtil.isEmpty(username)) {
			wrapper.like("realname", username);
		}
		if (!StringUtil.isEmpty(usertel)) {
			wrapper.eq("tel", usertel);
		}
		ShopUserList = this_ShopUserService.selectPage(
				new Page<ShopUser>(page,pagesizes),
				wrapper.orderBy("id", false)//根据id倒序输出
				).getRecords();	
		
		int total=this_ShopUserService.selectList(wrapper).size();		
		result.put("total", total);
		result.put("data", ShopUserList);		
		return result;
	}

	/***
	 * 单页，如果是修改，显示内容及表单，如果是添加显示表单
	 * 
	 * @param 
	 * @return
	 */
	@RequestMapping(value = "/ShopUserView", method = RequestMethod.GET)
	public ModelAndView view(ModelAndView modelAndView, ShopUser this_ShopUser, @RequestParam(value = "id", required = false) Integer id) {	
		if (id != null) {
            modelAndView.addObject("ShopUser", this_ShopUserService.selectById(id));
        }else
        {        	
        	modelAndView.addObject("ShopUser",this_ShopUser);
        }
	     return modelAndView;
	}

	/***
	 * 保存，如果是新增，调用insert，如果是修改，调用updateById
	 * 
	 * @param 
	 * @return
	 */
	@RequestMapping(value = "/Save", method = RequestMethod.POST)
	@ResponseBody
	public Object Save(ShopUser this_ShopUser, HttpSession session) {
		if (StringUtil.isEmpty(this_ShopUser.getOpenid())) {
			return renderError("微信号不能为空");
		}
		if (StringUtil.isEmpty(this_ShopUser.getCredit())) {
			return renderError("信誉值不能为空");
		}
		if (StringUtil.isEmpty(this_ShopUser.getWeiname())) {
			return renderError("微信昵称不能为空");
		}
		if (StringUtil.isEmpty(this_ShopUser.getWeipic())) {
			return renderError("微信头像不能为空");
		}
		if (StringUtil.isEmpty(this_ShopUser.getTel())) {
			return renderError("电话不能为空");
		}
		if (StringUtil.isEmpty(this_ShopUser.getRealname())) {
			return renderError("真实姓名不能为空");
		}
		if (StringUtil.isEmpty(this_ShopUser.getStorename())) {
			return renderError("店铺名称不能为空");
		}
		if (StringUtil.isEmpty(this_ShopUser.getAddress())) {
			return renderError("用户地址不能为空");
		}
		if (StringUtil.isEmpty(this_ShopUser.getRegisttime())) {
			return renderError("注册时间不能为空");
		}
		if (StringUtil.isEmpty(this_ShopUser.getStatus())) {
			return renderError("是否禁用不能为空");
		}
		if (StringUtil.isEmpty(this_ShopUser.getUid())) {
			return renderError("操作员id不能为空");
		}
		if (StringUtil.isEmpty(this_ShopUser.getUptime())) {
			return renderError("操作时间不能为空");
		}
		this_ShopUser.setUid(((SysUser)session.getAttribute(Const.lOGIN_SYSUSER)).getUid());
		this_ShopUser.setUptime(new Date());
		if (this_ShopUser.getId() == null) {
			return this_ShopUserService.insert(this_ShopUser) ? renderSuccess("添加成功")
					: renderError("添加失败");
		} else {
			return this_ShopUserService.updateById(this_ShopUser) ? renderSuccess("修改成功")
					: renderError("修改失败");
		}
	}

	/***
	 * 根据id删除
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/Delete")
	@ResponseBody
	public Object Delete(@RequestParam(value = "id", required = true) Integer id) {
		return this_ShopUserService.deleteById(id) ? renderSuccess("删除成功") : renderError("删除失败");
	}

	/***
	 * 根据ids批量删除，此方法根据前端需要
	 * 
	 * @param ids 逗号拼接项
	 * @return
	 */
	@RequestMapping("/BatchDelete")
	@ResponseBody
	public Object BatchDelete(@RequestParam(value = "ids", required = true) String ids) {
		List<Integer> idList=new ArrayList<Integer>();
		if(StringUtil.isNotEmpty(ids))
		{
			if (ids.contains("all,")) {
				ids=ids.replace("all,", "");//checkbox全选的时候带入，要去掉
			}			
			String[] lsStrings=ids.split(",");			
			for (String id : lsStrings) {
				idList.add(Integer.parseInt(id));
			}
			return this_ShopUserService.deleteBatchIds(idList) ? renderSuccess("删除成功") : renderError("删除失败");
		}else{
			return renderError("请选择需要删除的数据");
		}
		
	}
	
	/**
     * 停用权限
     * @param id
     * @return
     */
    @RequestMapping(value = "stop", method = RequestMethod.POST)
    @ResponseBody
    public Object stop(@RequestParam(value = "id", required = false) Integer id){
    	ShopUser user = this_ShopUserService.selectById(id);
    	user.setStatus("b");
        boolean retInt = this_ShopUserService.updateById(user);
        if (retInt){
            return renderSuccess("已停用！");
        }
        else {
            return renderError("停用失败！");
        }
    }

    /**
     * 启用权限
     * @param id
     * @return
     */
    @RequestMapping(value = "start", method = RequestMethod.POST)
    @ResponseBody
    public Object start(@RequestParam(value = "id", required = false) Integer id){
    	ShopUser user = this_ShopUserService.selectById(id);
    	user.setStatus("a");
        boolean retInt = this_ShopUserService.updateById(user);
        if (retInt){
            return renderSuccess("已启用！");
        }
        else {
            return renderError("启用失败！");
        }
    }
    
    /**
     * 修改用户信用值视图
     * @param id
     * @param modelAndView
     * @return
     */
    @RequestMapping(value = "userView", method = RequestMethod.GET)
    public ModelAndView userView(@RequestParam(value = "id", required = false) Integer id,
    		ModelAndView modelAndView){
    	modelAndView.addObject("ShopUser", this_ShopUserService.selectById(id));
    	return modelAndView;
    }
	
    
    /**
     * 修改用户信用值视图
     * @param id
     * @param modelAndView
     * @return
     */
    @RequestMapping(value = "userSave", method = RequestMethod.POST)
    @ResponseBody
    public Object userSave(ShopUser user){
    	if (this_ShopUserService.updateById(user)) {
			return renderSuccess("修改成功");
		}else{
			return renderError("修改失败");
		}
    }
    
    
	
}
