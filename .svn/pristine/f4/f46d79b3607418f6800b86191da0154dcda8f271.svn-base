package org.nwnu.system.controller;


import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;

import org.nwnu.system.entity.GoodsActivity;
import org.nwnu.system.entity.GoodsDetail;
import org.nwnu.system.entity.GoodsType;
import org.nwnu.system.entity.ShopUser;
import org.nwnu.system.entity.SysDict;
import org.nwnu.system.entity.SysUser;
import org.nwnu.system.service.GoodsActivityService;
import org.nwnu.system.service.GoodsDetailService;
import org.nwnu.system.service.GoodsTypeService;
import org.nwnu.system.service.SysDictService;
import org.nwnu.system.service.SysUserService;
import org.nwnu.base.controller.BaseController;//基础包
import org.nwnu.pub.util.Const;
import org.nwnu.pub.util.StringUtil;//自定义字符串处理类，如果没有就取掉
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.swing.text.AbstractDocument.Content;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * <p>
 * 商品 前端控制器
 * </p>
 *
 * @author Answer
 * @since 2017-08-12
 */
@Controller
@RequestMapping("/GoodsDetail")
public class GoodsDetailController extends BaseController {
	@Autowired
	private GoodsDetailService this_GoodsDetailService;	
	@Autowired
	private GoodsTypeService this_GoodsTypeService;
	@Autowired
    private HttpServletRequest request;
	@Autowired
	private SysUserService this_SysUserService;
	@Autowired
	private SysDictService this_SysDictService;
	@Autowired
	private GoodsActivityService this_GoodsActivityService;
	
	
	/***
	 * 每个controller的首页
	 * 	 
	 */
	@RequestMapping(value = "/GoodsDetailIndex")
	public ModelAndView GoodsDetailIndex(ModelAndView modelAndView) {
		return modelAndView;
	}

	/***
	 * 列表
	 * 
	 * @param 
	 * @param page
	 *            起始页
	 * @param rows
	 *            页面大小 * @param sort 排序字段 * @param rows 排序顺序
	 * @return
	 */
	@RequestMapping(value = "/List", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> GetList(
			@RequestParam(required = false, defaultValue = "1") int page,
			@RequestParam(required = false, defaultValue = "10") int pagesizes,
			@RequestParam(required = false, defaultValue = "") String status,
			@RequestParam(required = false, defaultValue = "") String datemin,
			@RequestParam(required = false, defaultValue = "") String datemax,
			@RequestParam(required = false, defaultValue = "") String spName,
			@RequestParam(required = false, defaultValue = "") String spCode) {
		 
		EntityWrapper<GoodsDetail> wrapper=new EntityWrapper<GoodsDetail>();	
		//如果有查询条件，此处需要构造查询warpper
		//例如wrapper.eq();
		//查询操作
		if(!StringUtil.isEmpty(status)){
			wrapper.eq("status", status);
		}
		if(!StringUtil.isEmpty(datemin) && StringUtil.isEmpty(datemax)){
			wrapper.like("uptime", datemin);
		}
		if(StringUtil.isEmpty(datemin) && !StringUtil.isEmpty(datemax)){
			wrapper.like("uptime", datemax);
		}
		if(!StringUtil.isEmpty(datemin) && !StringUtil.isEmpty(datemax)){
			wrapper.between("uptime", datemin + Const.DateSearch.START_TIME, datemax + Const.DateSearch.END_TIME);
		}
		if(!StringUtil.isEmpty(spName)){
			wrapper.like("goodsname", spName);
		}
		if(!StringUtil.isEmpty(spCode)){
			wrapper.eq("goodscode", spCode);
		}
		List<GoodsDetail> GoodsDetailList=this_GoodsDetailService.selectPage(
				new Page<GoodsDetail>(page,pagesizes),
				wrapper.orderBy("id", false)//根据id倒序输出
				).getRecords();	
		for(GoodsDetail gDetail : GoodsDetailList){
			gDetail.setSysUserName(this_SysUserService.selectById(gDetail.getUid()).getName());
			gDetail.setBgtName(this_GoodsTypeService.selectById(gDetail.getFid()).getName());
			gDetail.setSgtName(this_GoodsTypeService.selectById(gDetail.getSid()).getName());
			gDetail.setSpecStr(this_SysDictService.selectById(gDetail.getSpec()).getDictvalue());
			if (gDetail.getAid() == 0) {
				gDetail.setActivityname("暂不参与活动");
			}else{
				gDetail.setActivityname(this_GoodsActivityService.selectById(gDetail.getAid()).getName());
			}
			if(gDetail.getSellstatus().equals("a")){
				gDetail.setSellstatus("是");
			}else if(gDetail.getSellstatus().equals("b")){
				gDetail.setSellstatus("否");
			}
			if(gDetail.getNewstatus().equals("a")){
				gDetail.setNewstatus("是");
			}else if(gDetail.getNewstatus().equals("b")){
				gDetail.setNewstatus("否");
			}
			
		}
		Map<String, Object> result = new HashMap<String, Object>();		
		int total=this_GoodsDetailService.selectList(wrapper).size();		
		result.put("total", total);
		result.put("data", GoodsDetailList);		
		return result;
	}

	/***
	 * 单页，如果是修改，显示内容及表单，如果是添加显示表单
	 * 
	 * @param 
	 * @return
	 */
	@RequestMapping(value = "/GoodsDetailView", method = RequestMethod.GET)
	public ModelAndView view(ModelAndView modelAndView, GoodsDetail this_GoodsDetail, @RequestParam(value = "id", required = false) Integer id) {	
		if (id != null) {
			GoodsDetail gd = this_GoodsDetailService.selectById(id);
            modelAndView.addObject("GoodsDetail", gd);
        }else
        {     
        	this_GoodsDetail.setGoodscode(this_GoodsDetailService.getGoodsCode());
        	modelAndView.addObject("GoodsDetail",this_GoodsDetail);
        }
		//商品大类
		List<GoodsType> goodsTypes = null;
		goodsTypes = this_GoodsTypeService.selectList(new EntityWrapper<GoodsType>().eq("pid", 0));
		modelAndView.addObject("goodsTypes", goodsTypes);
		//商品规格从系统字典中获得
		List<SysDict> sysDicts = this_SysDictService
				.selectList(new EntityWrapper<SysDict>().eq("dict", Const.SYSDICT_SPEC));
		// 商品的活动
		List<GoodsActivity> activitieList = this_GoodsActivityService
				.selectList(new EntityWrapper<GoodsActivity>().eq("status", "a"));
		modelAndView.addObject("activityList", activitieList);
		modelAndView.addObject("sysDicts", sysDicts);
	     return modelAndView;
	}
	
	/**
	 * 获取小类
	 * @param fid
	 * @return
	 */
	@RequestMapping(value = "/getGoodTypesSid", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> getGoodTypesSid(
			@RequestParam(required = false) Integer fid) {
		Map<String, Object> result = new HashMap<String, Object>();
		List<GoodsType> goodsTypes = this_GoodsTypeService
				.selectList(new EntityWrapper<GoodsType>().eq("pid", fid));
		result.put("subType", goodsTypes);
		return result;
	}

	/***
	 * 保存，如果是新增，调用insert，如果是修改，调用updateById
	 * 
	 * @param 
	 * @return
	 */
	@RequestMapping(value = "/Save", method = RequestMethod.POST)
	@ResponseBody
	public Object Save(GoodsDetail this_GoodsDetail, HttpSession session,
			@RequestParam(value = "filepic1", required = false) MultipartFile filepic1,
			@RequestParam(value = "filepic2", required = false) MultipartFile filepic2,
			@RequestParam(value = "filepic3", required = false) MultipartFile filepic3) {
		if (StringUtil.isEmpty(this_GoodsDetail.getFid())) {
			return renderError("所属大类不能为空");
		}
		if (StringUtil.isEmpty(this_GoodsDetail.getSid())) {
			return renderError("所属小类不能为空");
		}
		if (StringUtil.isEmpty(this_GoodsDetail.getAid())) {
			return renderError("所属活动不能为空");
		}
		if (StringUtil.isEmpty(this_GoodsDetail.getGoodsname())) {
			return renderError("商品名称不能为空");
		}
		if (StringUtil.isEmpty(this_GoodsDetail.getSpec())) {
			return renderError("规格不能为空");
		}
		if (StringUtil.isEmpty(this_GoodsDetail.getPrice())) {
			return renderError("价格不能为空");
		}
		if (StringUtil.isEmpty(this_GoodsDetail.getKucun())) {
			return renderError("库存不能为空");
		}
		if (StringUtil.isEmpty(this_GoodsDetail.getChandi())) {
			return renderError("产地不能为空");
		}
		if (StringUtil.isEmpty(this_GoodsDetail.getPsdesc())) {
			return renderError("派送说明不能为空");
		}
		if (StringUtil.isEmpty(this_GoodsDetail.getDesc())) {
			return renderError("商品描述不能为空");
		}
		if (StringUtil.isEmpty(this_GoodsDetail.getStatus())) {
			return renderError("是否上架不能为空");
		}
		if (StringUtil.isEmpty(this_GoodsDetail.getSellstatus())) {
			return renderError("是否热卖不能为空");
		}
		if (StringUtil.isEmpty(this_GoodsDetail.getNewstatus())) {
			return renderError("是否新品不能为空");
		}
		List<MultipartFile> fileList = new ArrayList<MultipartFile>();
		List<String> urlList = new ArrayList<String>();
		fileList.add(filepic1);
		fileList.add(filepic2);
		fileList.add(filepic3);
		
		for(MultipartFile file : fileList){
			//文件上传
	        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
	        String date = df.format(new Date());
	        String year = date.substring(0, 4);
	        String month = date.substring(5, 7);
	        //文件路径 upload/article/当前年月/
	        String path = request.getSession().getServletContext().getRealPath("upload") + "/goodsDetail/" + year + month + "/";
	        //取扩展名
	        if(file != null){
	        	String extension = getExtensionName(file.getOriginalFilename());
		        
		        //拼接新的文件名
		        String fileName = getCurrTime()+buildRandom(5) + "." + extension;
		        
		        if (upload(path, fileName, file)) {
		        	urlList.add("/upload" + "/goodsDetail/" + year + month + "/"+fileName);
		        	continue;
		        } else{
		        	return renderError("保存失败！");
		        }
	        } else{
	        	urlList.add("");
	        }
		}
		//添加url
		this_GoodsDetail.setPic1(urlList.get(0));
		this_GoodsDetail.setPic2(urlList.get(1));
		this_GoodsDetail.setPic3(urlList.get(2));
		
		if(filepic1 == null){
			this_GoodsDetail.setPic1(this_GoodsDetailService.selectById(this_GoodsDetail.getId()).getPic1());
		}
		if(filepic2 == null){
			this_GoodsDetail.setPic2(this_GoodsDetailService.selectById(this_GoodsDetail.getId()).getPic2());
		}
		if(filepic3 == null){
			this_GoodsDetail.setPic3(this_GoodsDetailService.selectById(this_GoodsDetail.getId()).getPic3());
		}
		this_GoodsDetail.setUid(((SysUser)session.getAttribute(Const.lOGIN_SYSUSER)).getUid());
		this_GoodsDetail.setUptime(new Date());
		if (this_GoodsDetail.getId() == null) {
			return this_GoodsDetailService.insert(this_GoodsDetail) ? renderSuccess("添加成功")
					: renderError("添加失败");
		} else {
			return this_GoodsDetailService.updateById(this_GoodsDetail) ? renderSuccess("修改成功")
					: renderError("修改失败");
		}
	}

	/***
	 * 根据id删除
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/Delete")
	@ResponseBody
	public Object Delete(@RequestParam(value = "id", required = true) Integer id) {
		return this_GoodsDetailService.deleteById(id) ? renderSuccess("删除成功") : renderError("删除失败");
	}

	/***
	 * 根据ids批量删除，此方法根据前端需要
	 * 
	 * @param ids 逗号拼接项
	 * @return
	 */
	@RequestMapping("/BatchDelete")
	@ResponseBody
	public Object BatchDelete(@RequestParam(value = "ids", required = true) String ids) {
		List<Integer> idList=new ArrayList<Integer>();
		if(StringUtil.isNotEmpty(ids))
		{
			if (ids.contains("all,")) {
				ids=ids.replace("all,", "");//checkbox全选的时候带入，要去掉
			}			
			String[] lsStrings=ids.split(",");			
			for (String id : lsStrings) {
				idList.add(Integer.parseInt(id));
			}
			return this_GoodsDetailService.deleteBatchIds(idList) ? renderSuccess("删除成功") : renderError("删除失败");
		}else{
			return renderError("请选择需要删除的数据");
		}
		
	}
	
	/**
     * 停用权限
     * @param id
     * @return
     */
    @RequestMapping(value = "stop", method = RequestMethod.POST)
    @ResponseBody
    public Object stop(@RequestParam(value = "id", required = false) Integer id){
    	GoodsDetail goodsDetail = this_GoodsDetailService.selectById(id);
    	goodsDetail.setStatus("b");
        boolean retInt = this_GoodsDetailService.updateById(goodsDetail);
        if (retInt){
            return renderSuccess("已下架！");
        }
        else {
            return renderError("下架失败！");
        }
    }

    /**
     * 启用权限
     * @param id
     * @return
     */
    @RequestMapping(value = "start", method = RequestMethod.POST)
    @ResponseBody
    public Object start(@RequestParam(value = "id", required = false) Integer id){
    	GoodsDetail goodsDetail = this_GoodsDetailService.selectById(id);
    	goodsDetail.setStatus("a");
        boolean retInt = this_GoodsDetailService.updateById(goodsDetail);
        if (retInt){
            return renderSuccess("已上架！");
        }
        else {
            return renderError("上架失败！");
        }
    }
    /**
     * 添加商品折扣视图
     * @param id
     * @return
     */
    @RequestMapping(value = "GoodsDetailPref", method = RequestMethod.GET)
    @ResponseBody
    public ModelAndView goodsDetailPref(@RequestParam(value = "id", required = false) Integer id,
    		ModelAndView modelAndView){
    	GoodsDetail goodsDetail = this_GoodsDetailService.selectById(id);
    	modelAndView.addObject("GoodsDetail", goodsDetail);
    	return modelAndView;
    }
	
}
