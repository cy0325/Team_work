package org.nwnu.system.controller;


import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;

import org.nwnu.system.entity.GoodsType;
import org.nwnu.system.entity.SysUser;
import org.nwnu.system.service.GoodsTypeService;
import org.nwnu.system.service.SysUserService;
import org.nwnu.base.controller.BaseController;//基础包
import org.nwnu.pub.util.StringUtil;//自定义字符串处理类，如果没有就取掉
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * <p>
 * 商品类目 前端控制器
 * </p>
 *
 * @author Answer
 * @since 2017-08-12
 */
@Controller
@RequestMapping("/GoodsType")
public class GoodsTypeController extends BaseController {
	@Autowired
	private GoodsTypeService this_GoodsTypeService;	
	
	@Autowired
	private SysUserService this_sysUserService;
	
	@Autowired
    private HttpServletRequest request;
	
	/***
	 * 每个controller的首页
	 * 	 
	 */
	@RequestMapping(value = "/GoodsTypeIndex")
	public ModelAndView GoodsTypeIndex(ModelAndView modelAndView) {
		return modelAndView;
	}

	/***
	 * 列表
	 * 
	 * @param 
	 * @param page
	 *            起始页
	 * @param rows
	 *            页面大小 * @param sort 排序字段 * @param rows 排序顺序
	 * @return
	 */
	@RequestMapping(value = "/List", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> GetList(
			@RequestParam(required = false, defaultValue = "1") int page,
			@RequestParam(required = false, defaultValue = "10") int pagesizes) {
		EntityWrapper<GoodsType> wrapper=new EntityWrapper<GoodsType>();	
		//如果有查询条件，此处需要构造查询warpper
		//例如wrapper.eq();			
		List<GoodsType> GoodsTypeList=this_GoodsTypeService.selectPage(
				new Page<GoodsType>(page,pagesizes),
				wrapper.orderBy("id", false)//根据id倒序输出
				).getRecords();	
		for(GoodsType goodsType : GoodsTypeList){
			if(goodsType.getPid() == 0){
				goodsType.setGoodTypeName("大类");
			} else{
				goodsType.setGoodTypeName(this_GoodsTypeService.selectById(goodsType.getPid()).getName());
			}
			goodsType.setSysUser(this_sysUserService.selectById(goodsType.getUid()));
		}
		Map<String, Object> result = new HashMap<String, Object>();		
		int total=this_GoodsTypeService.selectList(wrapper).size();		
		result.put("total", total);
		result.put("data", GoodsTypeList);		
		return result;
	}

	/***
	 * 单页，如果是修改，显示内容及表单，如果是添加显示表单
	 * 
	 * @param 
	 * @return
	 */
	@RequestMapping(value = "/GoodsTypeView", method = RequestMethod.GET)
	public ModelAndView view(ModelAndView modelAndView, GoodsType this_GoodsType, @RequestParam(value = "id", required = false) Integer id) {	
		if (id != null) {
            modelAndView.addObject("GoodsType", this_GoodsTypeService.selectById(id));
        }else
        {        	
        	modelAndView.addObject("GoodsType",this_GoodsType);
        }
		List<GoodsType> goodsTypes = this_GoodsTypeService
				.selectList(new EntityWrapper<GoodsType>().eq("pid", 0));
		modelAndView.addObject("goodTypes", goodsTypes);
	     return modelAndView;
	}

	/***
	 * 保存，如果是新增，调用insert，如果是修改，调用updateById
	 * 
	 * @param 
	 * @return
	 */
	@RequestMapping(value = "/Save", method = RequestMethod.POST)
	@ResponseBody
	public Object Save(GoodsType this_GoodsType, HttpSession session,
			@RequestParam(value = "filepic", required = false) MultipartFile filepic) {
		if (StringUtil.isEmpty(this_GoodsType.getPid())) {
			return renderError("父类不能为空");
		}
		if (StringUtil.isEmpty(this_GoodsType.getName())) {
			return renderError("类目名称不能为空");
		}
		if (StringUtil.isEmpty(this_GoodsType.getSequence())) {
			return renderError("显示顺序不能为空");
		}
		
		//文件上传
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        String date = df.format(new Date());
        String year = date.substring(0, 4);
        String month = date.substring(5, 7);
        //文件路径 upload/article/当前年月/
        String path = request.getSession().getServletContext().getRealPath("upload") + "/goodsType/" + year + month + "/";
        //取扩展名
        if(filepic != null){
        	String extension = getExtensionName(filepic.getOriginalFilename());
	        
	        //拼接新的文件名
	        String fileName = getCurrTime()+buildRandom(5) + "." + extension;
	        
	        if (upload(path, fileName, filepic)) {
	        	this_GoodsType.setPic("/upload" + "/goodsType/" + year + month + "/"+fileName);
	        } else{
	        	return renderError("保存失败！");
	        }
        }
        if(filepic == null){
        	this_GoodsType.setPic(this_GoodsTypeService.selectById(this_GoodsType.getId()).getPic());
		}
		this_GoodsType.setUid(((SysUser)session.getAttribute("sysLoginUser")).getId());
		this_GoodsType.setUptime(new Date());
		if (this_GoodsType.getId() == null) {
			return this_GoodsTypeService.insert(this_GoodsType) ? renderSuccess("添加成功")
					: renderError("添加失败");
		} else {
			return this_GoodsTypeService.updateById(this_GoodsType) ? renderSuccess("修改成功")
					: renderError("修改失败");
		}
	}

	/***
	 * 根据id删除
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/Delete")
	@ResponseBody
	public Object Delete(@RequestParam(value = "id", required = true) Integer id) {
		return this_GoodsTypeService.deleteById(id) ? renderSuccess("删除成功") : renderError("删除失败");
	}

	/***
	 * 根据ids批量删除，此方法根据前端需要
	 * 
	 * @param ids 逗号拼接项
	 * @return
	 */
	@RequestMapping("/BatchDelete")
	@ResponseBody
	public Object BatchDelete(@RequestParam(value = "ids", required = true) String ids) {
		List<Integer> idList=new ArrayList<Integer>();
		if(StringUtil.isNotEmpty(ids))
		{
			if (ids.contains("all,")) {
				ids=ids.replace("all,", "");//checkbox全选的时候带入，要去掉
			}			
			String[] lsStrings=ids.split(",");			
			for (String id : lsStrings) {
				idList.add(Integer.parseInt(id));
			}
			return this_GoodsTypeService.deleteBatchIds(idList) ? renderSuccess("删除成功") : renderError("删除失败");
		}else{
			return renderError("请选择需要删除的数据");
		}
		
	}
	
	
	
}
