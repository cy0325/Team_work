package org.nwnu.system.controller;


import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;

import org.nwnu.system.entity.ShopOrder;
import org.nwnu.system.entity.ShopUser;
import org.nwnu.system.entity.UserReason;
import org.nwnu.system.service.ShopOrderService;
import org.nwnu.system.service.ShopUserService;
import org.nwnu.system.service.UserReasonService;
import org.nwnu.base.controller.BaseController;//基础包
import org.nwnu.pub.util.StringUtil;//自定义字符串处理类，如果没有就取掉
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpSession;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * <p>
 * 用户理由表 前端控制器
 * </p>
 *
 * @author Answer
 * @since 2017-08-23
 */
@Controller
@RequestMapping("/UserReason")
public class UserReasonController extends BaseController {
	@Autowired
	private UserReasonService this_UserReasonService;
	
	@Autowired
	private ShopOrderService this_ShopOrderService;
	
	@Autowired
	private ShopUserService this_ShopUserService;
	
	
	/***
	 * 每个controller的首页
	 * 	 
	 */
	@RequestMapping(value = "/UserReasonIndex")
	public ModelAndView UserReasonIndex(ModelAndView modelAndView) {
		return modelAndView;
	}

	/***
	 * 列表
	 * 
	 * @param 
	 * @param page
	 *            起始页
	 * @param rows
	 *            页面大小 * @param sort 排序字段 * @param rows 排序顺序
	 * @return
	 */
	@RequestMapping(value = "/List", method = RequestMethod.GET)
	@ResponseBody
	public Map<String, Object> GetList(
			@RequestParam(required = false, defaultValue = "1") int page,
			@RequestParam(required = false, defaultValue = "10") int pagesizes,
			@RequestParam(required = false, defaultValue = "b") String status,
			@RequestParam(required = false, defaultValue = "") String orderNum,
			@RequestParam(required = false, defaultValue = "") String userName,
			@RequestParam(required = false, defaultValue = "") String ordertel) {
		EntityWrapper<UserReason> wrapper=new EntityWrapper<UserReason>();	
		List<UserReason> UserReasonList = new ArrayList<UserReason>();
		Map<String, Object> result = new HashMap<String, Object>();
		//如果有查询条件，此处需要构造查询warpper
		//例如wrapper.eq();	
		// 根据status筛选原因类型
		wrapper.eq("type", status);
		//搜索查询条件
		if(!StringUtil.isEmpty(orderNum)){
			ShopOrder order = this_ShopOrderService.selectOne(new EntityWrapper<ShopOrder>()
					.eq("ordernum", orderNum));
			if (order == null) {
				result.put("total", 0);
				result.put("data", UserReasonList);
				return result;
			}
			wrapper.eq("orderid", order.getId());
		}
		if(!StringUtil.isEmpty(userName)) {
			List<ShopUser> userList = this_ShopUserService.selectList(new EntityWrapper<ShopUser>()
					.like("realname", userName));
			if (userList.size() == 0) {
				result.put("total", 0);
				result.put("data", UserReasonList);
				return result;
			}
			List<Integer> idList = new ArrayList<Integer>();
			for(ShopUser user : userList){
				idList.add(user.getId());
			}
			wrapper.in("suid", idList);
		}
		if(!StringUtil.isEmpty(ordertel)) {
			List<ShopUser> userList = this_ShopUserService.selectList(new EntityWrapper<ShopUser>()
					.eq("tel", ordertel));
			if (userList.size() == 0) {
				result.put("total", 0);
				result.put("data", UserReasonList);
				return result;
			}
			List<Integer> idList = new ArrayList<Integer>();
			for(ShopUser user : userList){
				idList.add(user.getId());
			}
			wrapper.in("suid", idList);
		}
		
		UserReasonList=this_UserReasonService.selectPage(
				new Page<UserReason>(page,pagesizes),
				wrapper.orderBy("id", false)//根据id倒序输出
				).getRecords();	
		// 前台输出显示
		for(UserReason reason : UserReasonList){
			reason.setOrder(this_ShopOrderService.selectById(reason.getOrderid()));
			reason.setUser(this_ShopUserService.selectById(reason.getSuid()));
		}
				
		int total=this_UserReasonService.selectList(wrapper).size();		
		result.put("total", total);
		result.put("data", UserReasonList);		
		return result;
	}

	/***
	 * 单页，如果是修改，显示内容及表单，如果是添加显示表单
	 * 
	 * @param 
	 * @return
	 */
	@RequestMapping(value = "/UserReasonView", method = RequestMethod.GET)
	public ModelAndView view(ModelAndView modelAndView, UserReason this_UserReason, @RequestParam(value = "id", required = false) Integer id) {	
		if (id != null) {
            modelAndView.addObject("UserReason", this_UserReasonService.selectById(id));
        }else
        {        	
        	modelAndView.addObject("UserReason",this_UserReason);
        }
	     return modelAndView;
	}

	/***
	 * 根据id删除
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping("/Delete")
	@ResponseBody
	public Object Delete(@RequestParam(value = "id", required = true) Integer id) {
		return this_UserReasonService.deleteById(id) ? renderSuccess("删除成功") : renderError("删除失败");
	}

	/***
	 * 根据ids批量删除，此方法根据前端需要
	 * 
	 * @param ids 逗号拼接项
	 * @return
	 */
	@RequestMapping("/BatchDelete")
	@ResponseBody
	public Object BatchDelete(@RequestParam(value = "ids", required = true) String ids) {
		List<Integer> idList=new ArrayList<Integer>();
		if(StringUtil.isNotEmpty(ids))
		{
			if (ids.contains("all,")) {
				ids=ids.replace("all,", "");//checkbox全选的时候带入，要去掉
			}			
			String[] lsStrings=ids.split(",");			
			for (String id : lsStrings) {
				idList.add(Integer.parseInt(id));
			}
			return this_UserReasonService.deleteBatchIds(idList) ? renderSuccess("删除成功") : renderError("删除失败");
		}else{
			return renderError("请选择需要删除的数据");
		}
		
	}
	
	
	
}
